// Generated by CoffeeScript 1.6.1
(function() {

  jQuery(function() {
    var Bar, name;
    name = 'bar';
    Bar = (function() {

      Bar.prototype.name = name;

      Bar.prototype["default"] = {
        content: '#content',
        handleWidth: 5,
        minWidth: 100,
        maxWidth: 400
      };

      function Bar(el, options) {
        var handle,
          _this = this;
        this.el = el;
        this.options = $.extend(this["default"], options);
        this.$el = $(this.el);
        if (this.options.handle != null) {
          this.handle = $(this.options.handle);
        } else {
          handle = $("<div style='width: " + this.options.handleWidth + "px; position: absolute; top: 0; bottom: 0; background-color: #000; cursor: w-resize'></div>");
          this.handle = handle;
          this.handle.css({
            left: this.$el.width()
          });
          this.$el.after(this.handle);
        }
        if (this.options.content != null) {
          this.content = $(this.options.content);
        }
        this.handle.off("mousedown." + name + "handle");
        this.handle.on("mousedown." + name + "handle", function(e) {
          return _this.startDrag();
        });
        this.handle.off("mouseup." + name + "handle");
        this.handle.on("mouseup." + name + "handle", function(e) {
          return _this.stopDrag();
        });
      }

      Bar.prototype.startDrag = function() {
        var _this = this;
        this.$el.data('width', this.$el.width());
        this.content.data('width', this.content.width());
        if (this.drag === true) {
          this;
        }
        return $(document).on("mousemove." + name + "handle", function(e) {
          if (e.pageX - _this.$el.offset().left >= _this.options.minWidth && e.pageX - _this.$el.offset().left <= _this.options.maxWidth) {
            _this.handle.css({
              left: e.pageX - _this.$el.offset().left
            });
            _this.$el.width(e.pageX - _this.$el.offset().left);
            _this.content.width(_this.content.data('width') + (_this.$el.data('width') - (e.pageX - _this.$el.offset().left)) - 1);
            return _this.drag = true;
          } else {
            return _this.stopDrag();
          }
        });
      };

      Bar.prototype.stopDrag = function() {
        this.drag = false;
        return $(document).off("mousemove." + name + "handle");
      };

      return Bar;

    })();
    return $.fn[name] = function(options) {
      return this.each(function() {
        if ($.data(this, name) == null) {
          return $.data(this, name, new Bar(this, options));
        }
      });
    };
  });

}).call(this);
